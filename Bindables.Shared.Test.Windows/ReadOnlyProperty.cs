using Bindables.Test;
using NUnit.Framework;

namespace Bindables.Windows.Test;

public abstract partial class WindowsTests<T> : TestBase<T> where T : WindowsPropertyGenerator, new()
{
	[Test]
	public void ReadOnlyProperty()
	{
		string sourceCodeTemplate = $@"
using {PlatformNamespace};
using {AttributeNamespace};

namespace Test
{{
	public partial class ExampleClass : {BaseClassName}
	{{
		[{DependencyPropertyAttributeName}(typeof(int))]
		private static readonly {DependencyPropertyKeyName} Example1PropertyKey;

		[{DependencyPropertyAttributeName}(typeof(string))]
		private static readonly {DependencyPropertyKeyName} Example2PropertyKey;

		[{AttachedPropertyAttributeName}(typeof(int))]
		private static readonly {DependencyPropertyKeyName} Example3PropertyKey;

		[{AttachedPropertyAttributeName}(typeof(string))]
		private static readonly {DependencyPropertyKeyName} Example4PropertyKey;
	}}
}}";

		string expectedSourceCodeTemplate = $@"
// Generated by Bindables
using {PlatformNamespace};

#nullable enable

namespace Test
{{
    public partial class ExampleClass
    {{
        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public static readonly {DependencyPropertyName} Example1Property;

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public int Example1
        {{
            get => (int)GetValue(Example1Property);
            private set => SetValue(Example1PropertyKey, value);
        }}

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public static readonly {DependencyPropertyName} Example2Property;

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public string? Example2
        {{
            get => (string?)GetValue(Example2Property);
            private set => SetValue(Example2PropertyKey, value);
        }}

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public static readonly {DependencyPropertyName} Example3Property;

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public static int GetExample3({BaseClassName} target)
        {{
            return (int)target.GetValue(Example3Property);
        }}

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        private static void SetExample3({BaseClassName} target, int value)
        {{
            target.SetValue(Example3Property, value);
        }}

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public static readonly {DependencyPropertyName} Example4Property;

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        public static string? GetExample4({BaseClassName} target)
        {{
            return (string?)target.GetValue(Example4Property);
        }}

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        private static void SetExample4({BaseClassName} target, string? value)
        {{
            target.SetValue(Example4Property, value);
        }}

        [global::System.CodeDom.Compiler.GeneratedCode(""{GeneratorName}"", ""{GeneratorVersion}"")]
        static ExampleClass()
        {{
            Example1PropertyKey = {DependencyPropertyName}.RegisterReadOnly(
                ""Example1"",
                typeof(int),
                typeof(ExampleClass),
                new FrameworkPropertyMetadata());
            
            Example1Property = Example1PropertyKey.{DependencyPropertyName};
            
            Example2PropertyKey = {DependencyPropertyName}.RegisterReadOnly(
                ""Example2"",
                typeof(string),
                typeof(ExampleClass),
                new FrameworkPropertyMetadata());
            
            Example2Property = Example2PropertyKey.{DependencyPropertyName};
            
            Example3PropertyKey = {DependencyPropertyName}.RegisterAttachedReadOnly(
                ""Example3"",
                typeof(int),
                typeof(ExampleClass),
                new FrameworkPropertyMetadata());
            
            Example3Property = Example3PropertyKey.{DependencyPropertyName};
            
            Example4PropertyKey = {DependencyPropertyName}.RegisterAttachedReadOnly(
                ""Example4"",
                typeof(string),
                typeof(ExampleClass),
                new FrameworkPropertyMetadata());
            
            Example4Property = Example4PropertyKey.{DependencyPropertyName};
            
        }}
    }}
}}";

		TestSourceCodeTemplate(sourceCodeTemplate, expectedSourceCodeTemplate);
	}
}